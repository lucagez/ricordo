{"version":3,"file":"ricordo.umd.js","sources":["../src/_trap.mjs","../src/ricordo.mjs"],"sourcesContent":["/**\n * Config [object]:\n * - ttl [number] => time-to-live for cached keys.\n * - ideal [number] => ideal number of items to keep cached.\n * - limit [number] => n of items that triggers store behavior.\n * - force [boolean] => force deletion of key after ttl. DEFAULT: `false`.\n */\n\nexport default class _Trap {\n  constructor({ ttl, ideal, limit, force = false }) {\n    this.ttl = ttl;\n    this.ideal = ideal;\n    this.limit = limit;\n    this.force = force;\n\n    if (!ttl || ttl < 1000) throw new Error('prop `ttl` is required when setting up custom caching');\n    if (this.limit && !this.ideal) throw new Error('prop `ideal` is required when setting `limit` prop');\n\n    this.stats = new Map();\n    this.store = new Map();\n  }\n\n  has(key) {\n    return this.store.has(key);\n  }\n\n  get(key) {\n    // Updating stats incrementing usage counter.\n    const n = this.stats.get(key) || 0;\n    this.stats.set(key, n + 1);\n\n    return this.store.get(key);\n  }\n\n  set(key, value) {\n    if (this.limit && this.store.size >= this.limit - 1) this.onLimit();\n\n    // Initializing ttl.\n    setTimeout(() => this.onTimeout(key), this.ttl);\n    return this.store.set(key, value);\n  }\n\n  clear() {\n    this.store.clear();\n  }\n\n  delete(key) {\n    this.store.delete(key);\n  }\n\n  onTimeout(key) {\n    // When force is set to `true` => key is delete from cache by default.\n    if (this.stats.get(key) === 0 || !this.stats.has(key) || this.force) this.store.delete(key);\n    else {\n      this.stats.set(key, 0);\n      setTimeout(() => this.onTimeout(key), this.ttl);\n    }\n  }\n\n  onLimit() {\n    // Sorting cache keys based on usage.\n    const arr = Array.from(this.stats).sort((a, b) => b[1] - a[1]);\n    arr.length = this.ideal;\n\n    // Building new store from most used cache keys.\n    const newStats = arr.map(e => [e[0], this.store.get(e[0])]);\n    this.store = new Map(newStats);\n  }\n}\n","import _Trap from './_trap';\n\n// This func exposes the newly created `Ricordo` instance.\n// Interacting with the inner class method (private).\nfunction run() {\n  // Avoiding stringification of simple arguments as Map store supports any type.\n  // By simple I mean every type comparable `simply` with the strict equality operator `===`.\n  // => Comparing simple arrais and objects is simpler / cleaner by stringifying them\n  // and comparing the resulting strings.\n\n  // NOTE-1: this is not tested with objects with a complex structure.\n\n  // NOTE-2: this func will throw error if a circular structure is provided.\n  // Support for those structures is out of the scope of this library\n  // => Keeping it small and usable also on the browser.\n  const key = this.makeKey(...arguments);\n\n  if (this.cache.has(key)) return this.cache.get(key);\n\n  const result = this.func(...arguments);\n  this.cache.set(key, result);\n  return result;\n}\n\n\nexport default class Ricordo {\n  constructor(func, config) {\n    if (typeof func !== 'function') throw new TypeError('`func` argument must be of type function');\n\n    // Used in `run`\n    this.func = func;\n\n    // Key value store used for caching `arguments => results`\n    this.cache = config ? new _Trap(config) : new Map();\n\n    const expose = run.bind(this);\n    expose.destroy = (key) => {\n      // Destroy previous cache instance and re-initializing to empty tate according to\n      // provided config object.\n      if (key) this.cache.delete(this.makeKey(key));\n      else this.cache.clear();\n    };\n\n    return expose;\n  }\n\n  makeKey() {\n    const first = arguments[0];\n    if (arguments.length <= 1) return typeof first === 'object' ? JSON.stringify(first) : first;\n    return JSON.stringify(arguments);\n  }\n}\n"],"names":["_Trap","constructor","ref","ttl","ideal","limit","force","Error","this","stats","Map","store","has","key","get","n","set","value","size","onLimit","setTimeout","onTimeout","clear","delete","arr","Array","from","sort","a","b","length","newStats","map","e","Ricordo","func","config","TypeError","cache","expose","makeKey","arguments","result","ref$1","bind","destroy","first","JSON","stringify"],"mappings":"sKAQe,IAAMA,EACnBC,SAAYC,gEAA6B,QAClCC,IAAMA,OACNC,MAAQA,OACRC,MAAQA,OACRC,MAAQA,GAERH,GAAOA,EAAM,IAAM,MAAM,IAAII,MAAM,4DACpCC,KAAKH,QAAUG,KAAKJ,MAAO,MAAM,IAAIG,MAAM,2DAE1CE,MAAQ,IAAIC,SACZC,MAAQ,IAAID,KAGnBE,YAAAA,aAAIC,UACKL,KAAKG,MAAMC,IAAIC,IAGxBC,YAAAA,aAAID,OAEIE,EAAIP,KAAKC,MAAMK,IAAID,IAAQ,cAC5BJ,MAAMO,IAAIH,EAAKE,EAAI,GAEjBP,KAAKG,MAAMG,IAAID,IAGxBG,YAAAA,aAAIH,EAAKI,qBACHT,KAAKH,OAASG,KAAKG,MAAMO,MAAQV,KAAKH,MAAQ,GAAGG,KAAKW,UAG1DC,6BAAiBZ,EAAKa,UAAUR,IAAML,KAAKL,KACpCK,KAAKG,MAAMK,IAAIH,EAAKI,IAG7BK,YAAAA,sBACOX,MAAMW,SAGbC,YAAAA,gBAAOV,QACAF,MAAMY,OAAOV,IAGpBQ,YAAAA,mBAAUR,cAEoB,IAAxBL,KAAKC,MAAMK,IAAID,KAAeL,KAAKC,MAAMG,IAAIC,IAAQL,KAAKF,MAAOE,KAAKG,MAAMY,OAAOV,SAEhFJ,MAAMO,IAAIH,EAAK,GACpBO,6BAAiBZ,EAAKa,UAAUR,IAAML,KAAKL,OAI/CgB,YAAAA,8BAEQK,EAAMC,MAAMC,KAAKlB,KAAKC,OAAOkB,cAAMC,EAAGC,UAAMA,EAAE,GAAKD,EAAE,KAC3DJ,EAAIM,OAAStB,KAAKJ,UAGZ2B,EAAWP,EAAIQ,aAAIC,SAAK,CAACA,EAAE,GAAIzB,EAAKG,MAAMG,IAAImB,EAAE,YACjDtB,MAAQ,IAAID,IAAIqB,ICzCzB,IAAqBG,EACnBjC,SAAYkC,EAAMC,iBACI,mBAATD,EAAqB,MAAM,IAAIE,UAAU,iDAG/CF,KAAOA,OAGPG,MAAQF,EAAS,IAAIpC,EAAMoC,GAAU,IAAI1B,QAExC6B,EA/BV,mBAWQ1B,KAAML,MAAKgC,cAAQtC,EAAGuC,cAExBjC,KAAK8B,MAAM1B,IAAIC,GAAM,OAAOL,KAAK8B,MAAMxB,IAAID,OAEzC6B,KAASlC,MAAK2B,WAAKQ,EAAGF,uBACvBH,MAAMtB,IAAIH,EAAK6B,GACbA,GAccE,KAAKpC,aACxB+B,EAAOM,iBAAWhC,GAGZA,EAAKL,EAAK8B,MAAMf,OAAOf,EAAKgC,QAAQ3B,IACnCL,EAAK8B,MAAMhB,SAGXiB,UAGTC,YAAAA,uBACQM,EAAQL,UAAU,UACpBA,UAAUX,QAAU,EAA2B,iBAAVgB,EAAqBC,KAAKC,UAAUF,GAASA,EAC/EC,KAAKC,UAAUP"}